//! The core global object. this is a special singleton object. it is used for
//! internal wayland protocol features.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::protocols::common::{EventSet, RequestSet};
use crate::wl::{
    Array, Connection, DeserializeError, Handle, Interface, Message, NewId, ObjectId, Opcode,
    Payload, PayloadType, RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;

use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

macro_rules! from_optional_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => None,
            Payload::ObjectId(id) => Some($ty::new($con, id)),
            _ => return Err(DeserializeError::UnexpectedType), // Abort deserializing.
        }
    };
}

macro_rules! from_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => return Err(DeserializeError::ObjectIsNull),
            Payload::ObjectId(id) => $ty::new($con, id),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

macro_rules! from_payload {
    ($ty:ident, $v:expr) => {
        match ($v).clone() {
            Payload::$ty(value) => value.into(),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

#[derive(Debug)]
pub enum Request {
    /// The sync request asks the server to emit the 'done' event on the returned
    /// wl_callback object. since requests are handled in-order and events are delivered
    /// in-order, this can be used as a barrier to ensure all previous requests and the
    /// resulting events have been handled. the object returned by this request will be
    /// destroyed by the compositor after the callback is fired and as such the client
    /// must not attempt to use it after that point. the callback_data passed in the
    /// callback is the event serial.
    Sync {
        /// Callback object for the sync request.
        callback: NewId,
    },
    /// This request creates a registry object that allows the client to list and bind
    /// the global objects available from the compositor. it should be noted that the
    /// server side resources consumed in response to a get_registry request can only be
    /// released when the client disconnects, not when the client side proxy is
    /// destroyed. therefore, clients should invoke get_registry as infrequently as
    /// possible to avoid wasting memory.
    GetRegistry {
        /// Global registry object.
        registry: NewId,
    },
}

impl Message for Request {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {
            Request::Sync { callback } => RawMessage {
                sender,
                opcode: Opcode(1),
                args: smallvec![callback.into()],
            },
            Request::GetRegistry { registry } => RawMessage {
                sender,
                opcode: Opcode(2),
                args: smallvec![registry.into()],
            },
        }
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Request, DeserializeError> {
        match m.opcode {
            Opcode(1) => Ok(Request::Sync {
                callback: from_payload!(NewId, m.args[0]),
            }),
            Opcode(2) => Ok(Request::GetRegistry {
                registry: from_payload!(NewId, m.args[0]),
            }),

            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        panic!("not a event!");
    }

    fn into_received_request(self) -> RequestSet {
        RequestSet::WlDisplay(self)
    }
}

#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum Error {
    /// Server couldn't find object.
    InvalidObject = 0,
    /// Method doesn't exist on the specified interface or malformed request.
    InvalidMethod = 1,
    /// Server is out of memory.
    NoMemory = 2,
    /// Implementation error in compositor.
    Implementation = 3,
}

impl Into<Payload> for Error {
    fn into(self) -> Payload {
        Payload::UInt(self as u32)
    }
}

impl From<u32> for Error {
    fn from(value: u32) -> Error {
        match value {
            0 => Error::InvalidObject,
            1 => Error::InvalidMethod,
            2 => Error::NoMemory,
            3 => Error::Implementation,

            _ => unreachable!(),
        }
    }
}

#[derive(Debug)]
pub enum Event {
    /// The error event is sent out when a fatal (non-recoverable) error has occurred.
    /// the object_id argument is the object where the error occurred, most often in
    /// response to a request to that object. the code identifies the error and is
    /// defined by the object interface. as such, each interface defines its own set of
    /// error codes. the message is a brief description of the error, for (debugging)
    /// convenience.
    Error {
        /// Object where the error occurred.
        object_id: ObjectId,
        /// Error code.
        code: u32,
        /// Error description.
        message: String,
    },
    /// This event is used internally by the object id management logic. when a client
    /// deletes an object that it had created, the server will send this event to
    /// acknowledge that it has seen the delete request. when the client receives this
    /// event, it will know that it can safely reuse the object id.
    DeleteId {
        /// Deleted object id.
        id: u32,
    },
}

impl Message for Event {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {
            Event::Error {
                object_id,
                code,
                message,
            } => RawMessage {
                sender,
                opcode: Opcode(3),
                args: smallvec![object_id.into(), code.into(), message.into()],
            },
            Event::DeleteId { id } => RawMessage {
                sender,
                opcode: Opcode(4),
                args: smallvec![id.into()],
            },
        }
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Event, DeserializeError> {
        match m.opcode {
            Opcode(3) => Ok(Event::Error {
                object_id: from_payload!(ObjectId, m.args[0]),

                code: from_payload!(UInt, m.args[1]),

                message: from_payload!(String, m.args[2]),
            }),
            Opcode(4) => Ok(Event::DeleteId {
                id: from_payload!(UInt, m.args[0]),
            }),

            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        EventSet::WlDisplay(WlDisplay::new(con, id), self)
    }

    fn into_received_request(self) -> RequestSet {
        panic!("not a request!");
    }
}

/// Core global object.
#[derive(Clone)]
pub struct WlDisplay {
    con: Rc<RefCell<dyn Connection>>,
    object_id: ObjectId,
}

impl PartialEq for WlDisplay {
    fn eq(&self, other: &Self) -> bool {
        self.id() == other.id()
    }
}

impl core::fmt::Debug for WlDisplay {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "WlDisplay@{}", self.object_id.0)
    }
}

impl Into<Payload> for WlDisplay {
    fn into(self) -> Payload {
        Payload::ObjectId(self.id())
    }
}

impl Interface for WlDisplay {
    type Event = Event;
    type Request = Request;
    const NAME: &'static str = "wl_display";
    const VERSION: u32 = 1;
    const PAYLOAD_TYPES: &'static [&'static [PayloadType]] = &[
        &[PayloadType::NewId],
        &[PayloadType::NewId],
        &[
            PayloadType::ObjectId,
            PayloadType::UInt,
            PayloadType::String,
        ],
        &[PayloadType::UInt],
    ];

    fn new(con: Rc<RefCell<dyn Connection>>, object_id: ObjectId) -> WlDisplay {
        WlDisplay { con, object_id }
    }

    fn connection(&self) -> &Rc<RefCell<dyn Connection>> {
        &self.con
    }

    fn id(&self) -> ObjectId {
        self.object_id
    }

    fn as_new_id(&self) -> NewId {
        NewId(self.object_id.0)
    }
}
