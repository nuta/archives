//! The singleton global registry object. the server has a number of global objects
//! that are available to all clients. these objects typically represent an actual
//! object in the server (for example, an input device) or they are singleton
//! objects that provide extension functionality. when a client creates a registry
//! object, the registry object will emit a global event for each global currently
//! in the registry. globals come and go as a result of device or monitor hotplugs,
//! reconfiguration or other events, and the registry will send out global and
//! global_remove events to keep the client up to date with the changes. to mark the
//! end of the initial burst of events, the client can use the wl_display.sync
//! request immediately after calling wl_display.get_registry. a client can bind to
//! a global object by using the bind request. this creates a client-side handle
//! that lets the object emit events to the client and lets the client invoke
//! requests on the object.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::protocols::common::{EventSet, RequestSet};
use crate::wl::{
    Array, Connection, DeserializeError, Handle, Interface, Message, NewId, ObjectId, Opcode,
    Payload, PayloadType, RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;

use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

macro_rules! from_optional_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => None,
            Payload::ObjectId(id) => Some($ty::new($con, id)),
            _ => return Err(DeserializeError::UnexpectedType), // Abort deserializing.
        }
    };
}

macro_rules! from_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => return Err(DeserializeError::ObjectIsNull),
            Payload::ObjectId(id) => $ty::new($con, id),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

macro_rules! from_payload {
    ($ty:ident, $v:expr) => {
        match ($v).clone() {
            Payload::$ty(value) => value.into(),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

#[derive(Debug)]
pub enum Request {
    /// Binds a new, client-created object to the server using the specified name as the
    /// identifier.
    Bind {
        /// Unique numeric name of the object.
        name: u32,
        /// Bounded object.
        id: NewId,
    },
}

impl Message for Request {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {
            Request::Bind { name, id } => RawMessage {
                sender,
                opcode: Opcode(1),
                args: smallvec![name.into(), id.into()],
            },
        }
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Request, DeserializeError> {
        match m.opcode {
            Opcode(1) => Ok(Request::Bind {
                name: from_payload!(UInt, m.args[0]),

                id: from_payload!(NewId, m.args[1]),
            }),

            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        panic!("not a event!");
    }

    fn into_received_request(self) -> RequestSet {
        RequestSet::WlRegistry(self)
    }
}

#[derive(Debug)]
pub enum Event {
    /// Notify the client of global objects. the event notifies the client that a global
    /// object with the given name is now available, and it implements the given version
    /// of the given interface.
    Global {
        /// Numeric name of the global object.
        name: u32,
        /// Interface implemented by the object.
        interface: String,
        /// Interface version.
        version: u32,
    },
    /// Notify the client of removed global objects. this event notifies the client that
    /// the global identified by name is no longer available. if the client bound to the
    /// global using the bind request, the client should now destroy that object. the
    /// object remains valid and requests to the object will be ignored until the client
    /// destroys it, to avoid races between the global going away and a client sending a
    /// request to it.
    GlobalRemove {
        /// Numeric name of the global object.
        name: u32,
    },
}

impl Message for Event {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {
            Event::Global {
                name,
                interface,
                version,
            } => RawMessage {
                sender,
                opcode: Opcode(2),
                args: smallvec![name.into(), interface.into(), version.into()],
            },
            Event::GlobalRemove { name } => RawMessage {
                sender,
                opcode: Opcode(3),
                args: smallvec![name.into()],
            },
        }
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Event, DeserializeError> {
        match m.opcode {
            Opcode(2) => Ok(Event::Global {
                name: from_payload!(UInt, m.args[0]),

                interface: from_payload!(String, m.args[1]),

                version: from_payload!(UInt, m.args[2]),
            }),
            Opcode(3) => Ok(Event::GlobalRemove {
                name: from_payload!(UInt, m.args[0]),
            }),

            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        EventSet::WlRegistry(WlRegistry::new(con, id), self)
    }

    fn into_received_request(self) -> RequestSet {
        panic!("not a request!");
    }
}

/// Global registry object.
#[derive(Clone)]
pub struct WlRegistry {
    con: Rc<RefCell<dyn Connection>>,
    object_id: ObjectId,
}

impl PartialEq for WlRegistry {
    fn eq(&self, other: &Self) -> bool {
        self.id() == other.id()
    }
}

impl core::fmt::Debug for WlRegistry {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "WlRegistry@{}", self.object_id.0)
    }
}

impl Into<Payload> for WlRegistry {
    fn into(self) -> Payload {
        Payload::ObjectId(self.id())
    }
}

impl Interface for WlRegistry {
    type Event = Event;
    type Request = Request;
    const NAME: &'static str = "wl_registry";
    const VERSION: u32 = 1;
    const PAYLOAD_TYPES: &'static [&'static [PayloadType]] = &[
        &[PayloadType::UInt, PayloadType::NewId],
        &[PayloadType::UInt, PayloadType::String, PayloadType::UInt],
        &[PayloadType::UInt],
    ];

    fn new(con: Rc<RefCell<dyn Connection>>, object_id: ObjectId) -> WlRegistry {
        WlRegistry { con, object_id }
    }

    fn connection(&self) -> &Rc<RefCell<dyn Connection>> {
        &self.con
    }

    fn id(&self) -> ObjectId {
        self.object_id
    }

    fn as_new_id(&self) -> NewId {
        NewId(self.object_id.0)
    }
}
