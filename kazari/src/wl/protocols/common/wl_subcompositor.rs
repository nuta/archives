//! The global interface exposing sub-surface compositing capabilities. a
//! wl_surface, that has sub-surfaces associated, is called the parent surface. sub-
//! surfaces can be arbitrarily nested and create a tree of sub-surfaces. the root
//! surface in a tree of sub-surfaces is the main surface. the main surface cannot
//! be a sub-surface, because sub-surfaces must always have a parent. a main surface
//! with its sub-surfaces forms a (compound) window. for window management purposes,
//! this set of wl_surface objects is to be considered as a single window, and it
//! should also behave as such. the aim of sub-surfaces is to offload some of the
//! compositing work within a window from clients to the compositor. a prime example
//! is a video player with decorations and video in separate wl_surface objects.
//! this should allow the compositor to pass yuv video buffer processing to
//! dedicated overlay hardware when possible.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::protocols::common::{EventSet, RequestSet};
use crate::wl::{
    Array, Connection, DeserializeError, Handle, Interface, Message, NewId, ObjectId, Opcode,
    Payload, PayloadType, RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;

use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

macro_rules! from_optional_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => None,
            Payload::ObjectId(id) => Some($ty::new($con, id)),
            _ => return Err(DeserializeError::UnexpectedType), // Abort deserializing.
        }
    };
}

macro_rules! from_object_payload {
    ($ty:ident, $con:expr, $v:expr) => {
        match ($v).clone() {
            Payload::ObjectId(id) if id.is_null() => return Err(DeserializeError::ObjectIsNull),
            Payload::ObjectId(id) => $ty::new($con, id),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

macro_rules! from_payload {
    ($ty:ident, $v:expr) => {
        match ($v).clone() {
            Payload::$ty(value) => value.into(),
            _ => return Err(DeserializeError::UnexpectedType),
        }
    };
}

#[derive(Debug)]
pub enum Request {
    /// Informs the server that the client will not be using this protocol object
    /// anymore. this does not affect any other objects, wl_subsurface objects included.
    Destroy {},
    /// Create a sub-surface interface for the given surface, and associate it with the
    /// given parent surface. this turns a plain wl_surface into a sub-surface. the to-
    /// be sub-surface must not already have another role, and it must not have an
    /// existing wl_subsurface object. otherwise a protocol error is raised. adding sub-
    /// surfaces to a parent is a double-buffered operation on the parent (see
    /// wl_surface.commit). the effect of adding a sub-surface becomes visible on the
    /// next time the state of the parent surface is applied. this request modifies the
    /// behaviour of wl_surface.commit request on the sub-surface, see the documentation
    /// on wl_subsurface interface.
    GetSubsurface {
        /// The new sub-surface object id.
        id: NewId,
        /// The surface to be turned into a sub-surface.
        surface: WlSurface,
        /// The parent surface.
        parent: WlSurface,
    },
}

impl Message for Request {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {
            Request::Destroy {} => RawMessage {
                sender,
                opcode: Opcode(1),
                args: smallvec![],
            },
            Request::GetSubsurface {
                id,
                surface,
                parent,
            } => RawMessage {
                sender,
                opcode: Opcode(2),
                args: smallvec![id.into(), surface.into(), parent.into()],
            },
        }
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Request, DeserializeError> {
        match m.opcode {
            Opcode(1) => Ok(Request::Destroy {}),
            Opcode(2) => Ok(Request::GetSubsurface {
                id: from_payload!(NewId, m.args[0]),

                surface: from_object_payload!(WlSurface, con.clone(), m.args[1]),

                parent: from_object_payload!(WlSurface, con.clone(), m.args[2]),
            }),

            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        panic!("not a event!");
    }

    fn into_received_request(self) -> RequestSet {
        RequestSet::WlSubcompositor(self)
    }
}

#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum Error {
    /// The to-be sub-surface is invalid.
    BadSurface = 0,
}

impl Into<Payload> for Error {
    fn into(self) -> Payload {
        Payload::UInt(self as u32)
    }
}

impl From<u32> for Error {
    fn from(value: u32) -> Error {
        match value {
            0 => Error::BadSurface,

            _ => unreachable!(),
        }
    }
}

#[derive(Debug)]
pub enum Event {}

impl Message for Event {
    fn into_raw(self, sender: ObjectId) -> RawMessage {
        match self {}
    }

    fn from_raw(
        con: Rc<RefCell<dyn Connection>>,
        m: &RawMessage,
    ) -> Result<Event, DeserializeError> {
        match m.opcode {
            _ => Err(DeserializeError::UnknownOpcode),
        }
    }

    fn into_received_event(self, con: Rc<RefCell<dyn Connection>>, id: ObjectId) -> EventSet {
        EventSet::WlSubcompositor(WlSubcompositor::new(con, id), self)
    }

    fn into_received_request(self) -> RequestSet {
        panic!("not a request!");
    }
}

/// Sub-surface compositing.
#[derive(Clone)]
pub struct WlSubcompositor {
    con: Rc<RefCell<dyn Connection>>,
    object_id: ObjectId,
}

impl PartialEq for WlSubcompositor {
    fn eq(&self, other: &Self) -> bool {
        self.id() == other.id()
    }
}

impl core::fmt::Debug for WlSubcompositor {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "WlSubcompositor@{}", self.object_id.0)
    }
}

impl Into<Payload> for WlSubcompositor {
    fn into(self) -> Payload {
        Payload::ObjectId(self.id())
    }
}

impl Interface for WlSubcompositor {
    type Event = Event;
    type Request = Request;
    const NAME: &'static str = "wl_subcompositor";
    const VERSION: u32 = 1;
    const PAYLOAD_TYPES: &'static [&'static [PayloadType]] = &[
        &[],
        &[
            PayloadType::NewId,
            PayloadType::ObjectId,
            PayloadType::ObjectId,
        ],
    ];

    fn new(con: Rc<RefCell<dyn Connection>>, object_id: ObjectId) -> WlSubcompositor {
        WlSubcompositor { con, object_id }
    }

    fn connection(&self) -> &Rc<RefCell<dyn Connection>> {
        &self.con
    }

    fn id(&self) -> ObjectId {
        self.object_id
    }

    fn as_new_id(&self) -> NewId {
        NewId(self.object_id.0)
    }
}
