//! An interface that may be implemented by a wl_surface, for implementations that
//! provide a desktop-style user interface. it provides requests to treat surfaces
//! like toplevel, fullscreen or popup windows, move, resize or maximize them,
//! associate metadata like title and class, etc. on the server side the object is
//! automatically destroyed when the related wl_surface is destroyed. on the client
//! side, wl_shell_surface_destroy() must be called before destroying the wl_surface
//! object.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::{
    Array, Connection, Handle, Interface, Message, NewId, ObjectId, Opcode, Payload, PayloadType,
    RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;

use crate::wl::protocols::common::wl_shell_surface::*;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

pub trait WlShellSurfaceExt {
    /// Ping a client to check if it is receiving events and sending requests. a client
    /// is expected to reply with a pong request.
    fn ping(&self, serial: u32) -> Result<(), SendError>;
    /// The configure event asks the client to resize its surface. the size is a hint,
    /// in the sense that the client is free to ignore it if it doesn't resize, pick a
    /// smaller size (to satisfy aspect ratio or resize in steps of nxm pixels). the
    /// edges parameter provides a hint about how the surface was resized. the client
    /// may use this information to decide how to adjust its content to the new size
    /// (e.g. a scrolling area might adjust its content position to leave the viewable
    /// content unmoved). the client is free to dismiss all but the last configure event
    /// it received. the width and height arguments specify the size of the window in
    /// surface-local coordinates.
    fn configure(&self, edges: Resize, width: i32, height: i32) -> Result<(), SendError>;
    /// The popup_done event is sent out when a popup grab is broken, that is, when the
    /// user clicks a surface that doesn't belong to the client owning the popup
    /// surface.
    fn popup_done(&self) -> Result<(), SendError>;
}

impl WlShellSurfaceExt for WlShellSurface {
    /// Ping a client to check if it is receiving events and sending requests. a client
    /// is expected to reply with a pong request.
    fn ping(&self, serial: u32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Ping { serial }.into_raw(self.id()))
    }
    /// The configure event asks the client to resize its surface. the size is a hint,
    /// in the sense that the client is free to ignore it if it doesn't resize, pick a
    /// smaller size (to satisfy aspect ratio or resize in steps of nxm pixels). the
    /// edges parameter provides a hint about how the surface was resized. the client
    /// may use this information to decide how to adjust its content to the new size
    /// (e.g. a scrolling area might adjust its content position to leave the viewable
    /// content unmoved). the client is free to dismiss all but the last configure event
    /// it received. the width and height arguments specify the size of the window in
    /// surface-local coordinates.
    fn configure(&self, edges: Resize, width: i32, height: i32) -> Result<(), SendError> {
        self.connection().borrow_mut().send(
            Event::Configure {
                edges,
                width,
                height,
            }
            .into_raw(self.id()),
        )
    }
    /// The popup_done event is sent out when a popup grab is broken, that is, when the
    /// user clicks a surface that doesn't belong to the client owning the popup
    /// surface.
    fn popup_done(&self) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::PopupDone {}.into_raw(self.id()))
    }
}
