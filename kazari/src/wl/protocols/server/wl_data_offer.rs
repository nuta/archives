//! A wl_data_offer represents a piece of data offered for transfer by another
//! client (the source client). it is used by the copy-and-paste and drag-and-drop
//! mechanisms. the offer describes the different mime types that the data can be
//! converted to and provides the mechanism for transferring the data directly from
//! the source client.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::{
    Array, Connection, Handle, Interface, Message, NewId, ObjectId, Opcode, Payload, PayloadType,
    RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;

use crate::wl::protocols::common::wl_data_offer::*;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

pub trait WlDataOfferExt {
    /// Sent immediately after creating the wl_data_offer object. one event per offered
    /// mime type.
    fn offer(&self, mime_type: String) -> Result<(), SendError>;
    /// This event indicates the actions offered by the data source. it will be sent
    /// right after wl_data_device.enter, or anytime the source side changes its offered
    /// actions through wl_data_source.set_actions.
    fn source_actions(
        &self,
        source_actions: super::super::common::wl_data_device_manager::DndAction,
    ) -> Result<(), SendError>;
    /// This event indicates the action selected by the compositor after matching the
    /// source/destination side actions. only one action (or none) will be offered here.
    /// this event can be emitted multiple times during the drag-and-drop operation in
    /// response to destination side action changes through wl_data_offer.set_actions.
    /// this event will no longer be emitted after wl_data_device.drop happened on the
    /// drag-and-drop destination, the client must honor the last action received, or
    /// the last preferred one set through wl_data_offer.set_actions when handling an
    /// "ask" action. compositors may also change the selected action on the fly, mainly
    /// in response to keyboard modifier changes during the drag-and-drop operation. the
    /// most recent action received is always the valid one. prior to receiving
    /// wl_data_device.drop, the chosen action may change (e.g. due to keyboard
    /// modifiers being pressed). at the time of receiving wl_data_device.drop the drag-
    /// and-drop destination must honor the last action received. action changes may
    /// still happen after wl_data_device.drop, especially on "ask" actions, where the
    /// drag-and-drop destination may choose another action afterwards. action changes
    /// happening at this stage are always the result of inter-client negotiation, the
    /// compositor shall no longer be able to induce a different action. upon "ask"
    /// actions, it is expected that the drag-and-drop destination may potentially
    /// choose a different action and/or mime type, based on
    /// wl_data_offer.source_actions and finally chosen by the user (e.g. popping up a
    /// menu with the available options). the final wl_data_offer.set_actions and
    /// wl_data_offer.accept requests must happen before the call to
    /// wl_data_offer.finish.
    fn action(
        &self,
        dnd_action: super::super::common::wl_data_device_manager::DndAction,
    ) -> Result<(), SendError>;
}

impl WlDataOfferExt for WlDataOffer {
    /// Sent immediately after creating the wl_data_offer object. one event per offered
    /// mime type.
    fn offer(&self, mime_type: String) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Offer { mime_type }.into_raw(self.id()))
    }
    /// This event indicates the actions offered by the data source. it will be sent
    /// right after wl_data_device.enter, or anytime the source side changes its offered
    /// actions through wl_data_source.set_actions.
    fn source_actions(
        &self,
        source_actions: super::super::common::wl_data_device_manager::DndAction,
    ) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::SourceActions { source_actions }.into_raw(self.id()))
    }
    /// This event indicates the action selected by the compositor after matching the
    /// source/destination side actions. only one action (or none) will be offered here.
    /// this event can be emitted multiple times during the drag-and-drop operation in
    /// response to destination side action changes through wl_data_offer.set_actions.
    /// this event will no longer be emitted after wl_data_device.drop happened on the
    /// drag-and-drop destination, the client must honor the last action received, or
    /// the last preferred one set through wl_data_offer.set_actions when handling an
    /// "ask" action. compositors may also change the selected action on the fly, mainly
    /// in response to keyboard modifier changes during the drag-and-drop operation. the
    /// most recent action received is always the valid one. prior to receiving
    /// wl_data_device.drop, the chosen action may change (e.g. due to keyboard
    /// modifiers being pressed). at the time of receiving wl_data_device.drop the drag-
    /// and-drop destination must honor the last action received. action changes may
    /// still happen after wl_data_device.drop, especially on "ask" actions, where the
    /// drag-and-drop destination may choose another action afterwards. action changes
    /// happening at this stage are always the result of inter-client negotiation, the
    /// compositor shall no longer be able to induce a different action. upon "ask"
    /// actions, it is expected that the drag-and-drop destination may potentially
    /// choose a different action and/or mime type, based on
    /// wl_data_offer.source_actions and finally chosen by the user (e.g. popping up a
    /// menu with the available options). the final wl_data_offer.set_actions and
    /// wl_data_offer.accept requests must happen before the call to
    /// wl_data_offer.finish.
    fn action(
        &self,
        dnd_action: super::super::common::wl_data_device_manager::DndAction,
    ) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Action { dnd_action }.into_raw(self.id()))
    }
}
