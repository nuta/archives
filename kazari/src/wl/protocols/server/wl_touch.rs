//! The wl_touch interface represents a touchscreen associated with a seat. touch
//! interactions can consist of one or more contacts. for each contact, a series of
//! events is generated, starting with a down event, followed by zero or more motion
//! events, and ending with an up event. events relating to the same contact point
//! can be identified by the id of the sequence.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::{
    Array, Connection, Handle, Interface, Message, NewId, ObjectId, Opcode, Payload, PayloadType,
    RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;

use crate::wl::protocols::common::wl_touch::*;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

pub trait WlTouchExt {
    /// A new touch point has appeared on the surface. this touch point is assigned a
    /// unique id. future events from this touch point reference this id. the id ceases
    /// to be valid after a touch up event and may be reused in the future.
    fn down(
        &self,
        serial: u32,
        time: u32,
        surface: WlSurface,
        id: i32,
        x: f32,
        y: f32,
    ) -> Result<(), SendError>;
    /// The touch point has disappeared. no further events will be sent for this touch
    /// point and the touch point's id is released and may be reused in a future touch
    /// down event.
    fn up(&self, serial: u32, time: u32, id: i32) -> Result<(), SendError>;
    /// A touch point has changed coordinates.
    fn motion(&self, time: u32, id: i32, x: f32, y: f32) -> Result<(), SendError>;
    /// Indicates the end of a set of events that logically belong together. a client is
    /// expected to accumulate the data in all events within the frame before
    /// proceeding. a wl_touch.frame terminates at least one event but otherwise no
    /// guarantee is provided about the set of events within a frame. a client must
    /// assume that any state not updated in a frame is unchanged from the previously
    /// known state.
    fn frame(&self) -> Result<(), SendError>;
    /// Sent if the compositor decides the touch stream is a global gesture. no further
    /// events are sent to the clients from that particular gesture. touch cancellation
    /// applies to all touch points currently active on this client's surface. the
    /// client is responsible for finalizing the touch points, future touch points on
    /// this surface may reuse the touch point id.
    fn cancel(&self) -> Result<(), SendError>;
    /// Sent when a touchpoint has changed its shape. this event does not occur on its
    /// own. it is sent before a wl_touch.frame event and carries the new shape
    /// information for any previously reported, or new touch points of that frame.
    /// other events describing the touch point such as wl_touch.down, wl_touch.motion
    /// or wl_touch.orientation may be sent within the same wl_touch.frame. a client
    /// should treat these events as a single logical touch point update. the order of
    /// wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. a
    /// wl_touch.down event is guaranteed to occur before the first wl_touch.shape event
    /// for this touch id but both events may occur within the same wl_touch.frame. a
    /// touchpoint shape is approximated by an ellipse through the major and minor axis
    /// length. the major axis length describes the longer diameter of the ellipse,
    /// while the minor axis length describes the shorter diameter. major and minor are
    /// orthogonal and both are specified in surface-local coordinates. the center of
    /// the ellipse is always at the touchpoint location as reported by wl_touch.down or
    /// wl_touch.move. this event is only sent by the compositor if the touch device
    /// supports shape reports. the client has to make reasonable assumptions about the
    /// shape if it did not receive this event.
    fn shape(&self, id: i32, major: f32, minor: f32) -> Result<(), SendError>;
    /// Sent when a touchpoint has changed its orientation. this event does not occur on
    /// its own. it is sent before a wl_touch.frame event and carries the new shape
    /// information for any previously reported, or new touch points of that frame.
    /// other events describing the touch point such as wl_touch.down, wl_touch.motion
    /// or wl_touch.shape may be sent within the same wl_touch.frame. a client should
    /// treat these events as a single logical touch point update. the order of
    /// wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. a
    /// wl_touch.down event is guaranteed to occur before the first wl_touch.orientation
    /// event for this touch id but both events may occur within the same
    /// wl_touch.frame. the orientation describes the clockwise angle of a touchpoint's
    /// major axis to the positive surface y-axis and is normalized to the -180 to +180
    /// degree range. the granularity of orientation depends on the touch device, some
    /// devices only support binary rotation values between 0 and 90 degrees. this event
    /// is only sent by the compositor if the touch device supports orientation reports.
    fn orientation(&self, id: i32, orientation: f32) -> Result<(), SendError>;
}

impl WlTouchExt for WlTouch {
    /// A new touch point has appeared on the surface. this touch point is assigned a
    /// unique id. future events from this touch point reference this id. the id ceases
    /// to be valid after a touch up event and may be reused in the future.
    fn down(
        &self,
        serial: u32,
        time: u32,
        surface: WlSurface,
        id: i32,
        x: f32,
        y: f32,
    ) -> Result<(), SendError> {
        self.connection().borrow_mut().send(
            Event::Down {
                serial,
                time,
                surface,
                id,
                x,
                y,
            }
            .into_raw(self.id()),
        )
    }
    /// The touch point has disappeared. no further events will be sent for this touch
    /// point and the touch point's id is released and may be reused in a future touch
    /// down event.
    fn up(&self, serial: u32, time: u32, id: i32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Up { serial, time, id }.into_raw(self.id()))
    }
    /// A touch point has changed coordinates.
    fn motion(&self, time: u32, id: i32, x: f32, y: f32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Motion { time, id, x, y }.into_raw(self.id()))
    }
    /// Indicates the end of a set of events that logically belong together. a client is
    /// expected to accumulate the data in all events within the frame before
    /// proceeding. a wl_touch.frame terminates at least one event but otherwise no
    /// guarantee is provided about the set of events within a frame. a client must
    /// assume that any state not updated in a frame is unchanged from the previously
    /// known state.
    fn frame(&self) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Frame {}.into_raw(self.id()))
    }
    /// Sent if the compositor decides the touch stream is a global gesture. no further
    /// events are sent to the clients from that particular gesture. touch cancellation
    /// applies to all touch points currently active on this client's surface. the
    /// client is responsible for finalizing the touch points, future touch points on
    /// this surface may reuse the touch point id.
    fn cancel(&self) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Cancel {}.into_raw(self.id()))
    }
    /// Sent when a touchpoint has changed its shape. this event does not occur on its
    /// own. it is sent before a wl_touch.frame event and carries the new shape
    /// information for any previously reported, or new touch points of that frame.
    /// other events describing the touch point such as wl_touch.down, wl_touch.motion
    /// or wl_touch.orientation may be sent within the same wl_touch.frame. a client
    /// should treat these events as a single logical touch point update. the order of
    /// wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. a
    /// wl_touch.down event is guaranteed to occur before the first wl_touch.shape event
    /// for this touch id but both events may occur within the same wl_touch.frame. a
    /// touchpoint shape is approximated by an ellipse through the major and minor axis
    /// length. the major axis length describes the longer diameter of the ellipse,
    /// while the minor axis length describes the shorter diameter. major and minor are
    /// orthogonal and both are specified in surface-local coordinates. the center of
    /// the ellipse is always at the touchpoint location as reported by wl_touch.down or
    /// wl_touch.move. this event is only sent by the compositor if the touch device
    /// supports shape reports. the client has to make reasonable assumptions about the
    /// shape if it did not receive this event.
    fn shape(&self, id: i32, major: f32, minor: f32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Shape { id, major, minor }.into_raw(self.id()))
    }
    /// Sent when a touchpoint has changed its orientation. this event does not occur on
    /// its own. it is sent before a wl_touch.frame event and carries the new shape
    /// information for any previously reported, or new touch points of that frame.
    /// other events describing the touch point such as wl_touch.down, wl_touch.motion
    /// or wl_touch.shape may be sent within the same wl_touch.frame. a client should
    /// treat these events as a single logical touch point update. the order of
    /// wl_touch.shape, wl_touch.orientation and wl_touch.motion is not guaranteed. a
    /// wl_touch.down event is guaranteed to occur before the first wl_touch.orientation
    /// event for this touch id but both events may occur within the same
    /// wl_touch.frame. the orientation describes the clockwise angle of a touchpoint's
    /// major axis to the positive surface y-axis and is normalized to the -180 to +180
    /// degree range. the granularity of orientation depends on the touch device, some
    /// devices only support binary rotation values between 0 and 90 degrees. this event
    /// is only sent by the compositor if the touch device supports orientation reports.
    fn orientation(&self, id: i32, orientation: f32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Event::Orientation { id, orientation }.into_raw(self.id()))
    }
}
