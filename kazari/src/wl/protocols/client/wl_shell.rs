//! This interface is implemented by servers that provide desktop-style user
//! interfaces. it allows clients to associate a wl_shell_surface with a basic
//! surface. note! this protocol is deprecated and not intended for production use.
//! for desktop-style user interfaces, use xdg_shell.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::{
    Array, Connection, Handle, Interface, Message, NewId, ObjectId, Opcode, Payload, PayloadType,
    RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;

use crate::wl::protocols::common::wl_shell::*;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;
use crate::wl::protocols::common::xdg_surface::XdgSurface;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

pub trait WlShellExt {
    /// Create a shell surface for an existing surface. this gives the wl_surface the
    /// role of a shell surface. if the wl_surface already has another role, it raises a
    /// protocol error. only one shell surface can be associated with a given surface.
    fn get_shell_surface(&self, id: NewId, surface: WlSurface) -> Result<(), SendError>;
}

impl WlShellExt for WlShell {
    /// Create a shell surface for an existing surface. this gives the wl_surface the
    /// role of a shell surface. if the wl_surface already has another role, it raises a
    /// protocol error. only one shell surface can be associated with a given surface.
    fn get_shell_surface(&self, id: NewId, surface: WlSurface) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Request::GetShellSurface { id, surface }.into_raw(self.id()))
    }
}
