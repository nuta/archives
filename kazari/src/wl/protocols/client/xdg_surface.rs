//! An interface that may be implemented by a wl_surface, for implementations that
//! provide a desktop-style user interface. it provides a base set of functionality
//! required to construct user interface elements requiring management by the
//! compositor, such as toplevel windows, menus, etc. the types of functionality are
//! split into xdg_surface roles. creating an xdg_surface does not set the role for
//! a wl_surface. in order to map an xdg_surface, the client must create a role-
//! specific object using, e.g., get_toplevel, get_popup. the wl_surface for any
//! given xdg_surface can have at most one role, and may not be assigned any role
//! not based on xdg_surface. a role must be assigned before any other requests are
//! made to the xdg_surface object. the client must call wl_surface.commit on the
//! corresponding wl_surface for the xdg_surface state to take effect. creating an
//! xdg_surface from a wl_surface which has a buffer attached or committed is a
//! client error, and any attempts by a client to attach or manipulate a buffer
//! prior to the first xdg_surface.configure call must also be treated as errors.
//! after creating a role-specific object and setting it up, the client must perform
//! an initial commit without any buffer attached. the compositor will reply with an
//! xdg_surface.configure event. the client must acknowledge it and is then allowed
//! to attach a buffer to map the surface. mapping an xdg_surface-based role surface
//! is defined as making it possible for the surface to be shown by the compositor.
//! note that a mapped surface is not guaranteed to be visible once it is mapped.
//! for an xdg_surface to be mapped by the compositor, the following conditions must
//! be met: (1) the client has assigned an xdg_surface-based role to the surface (2)
//! the client has set and committed the xdg_surface state and the role-dependent
//! state to the surface (3) the client has committed a buffer to the surface a
//! newly-unmapped surface is considered to have met condition (1) out of the 3
//! required conditions for mapping a surface if its role surface has not been
//! destroyed.

//
//
//              GENERATED BY OUR WAYLAND-SCANNER. DO NOT EDIT!
//
//

#![allow(unused)]
#![allow(clippy::from_over_into)]
#![allow(clippy::match_single_binding)]

use crate::wl::{
    Array, Connection, Handle, Interface, Message, NewId, ObjectId, Opcode, Payload, PayloadType,
    RawMessage, SendError,
};
use alloc::rc::Rc;
use alloc::string::String;
use core::cell::RefCell;
use smallvec::smallvec;

use crate::wl::protocols::common::wl_buffer::WlBuffer;
use crate::wl::protocols::common::wl_callback::WlCallback;
use crate::wl::protocols::common::wl_compositor::WlCompositor;
use crate::wl::protocols::common::wl_data_device::WlDataDevice;
use crate::wl::protocols::common::wl_data_device_manager::WlDataDeviceManager;
use crate::wl::protocols::common::wl_data_offer::WlDataOffer;
use crate::wl::protocols::common::wl_data_source::WlDataSource;
use crate::wl::protocols::common::wl_display::WlDisplay;
use crate::wl::protocols::common::wl_keyboard::WlKeyboard;
use crate::wl::protocols::common::wl_output::WlOutput;
use crate::wl::protocols::common::wl_pointer::WlPointer;
use crate::wl::protocols::common::wl_region::WlRegion;
use crate::wl::protocols::common::wl_registry::WlRegistry;
use crate::wl::protocols::common::wl_seat::WlSeat;
use crate::wl::protocols::common::wl_shell::WlShell;
use crate::wl::protocols::common::wl_shell_surface::WlShellSurface;
use crate::wl::protocols::common::wl_shm::WlShm;
use crate::wl::protocols::common::wl_shm_pool::WlShmPool;
use crate::wl::protocols::common::wl_subcompositor::WlSubcompositor;
use crate::wl::protocols::common::wl_subsurface::WlSubsurface;
use crate::wl::protocols::common::wl_surface::WlSurface;
use crate::wl::protocols::common::wl_touch::WlTouch;
use crate::wl::protocols::common::xdg_popup::XdgPopup;
use crate::wl::protocols::common::xdg_positioner::XdgPositioner;

use crate::wl::protocols::common::xdg_surface::*;
use crate::wl::protocols::common::xdg_toplevel::XdgToplevel;
use crate::wl::protocols::common::xdg_wm_base::XdgWmBase;

pub trait XdgSurfaceExt {
    /// Destroy the xdg_surface object. an xdg_surface must only be destroyed after its
    /// role object has been destroyed.
    fn destroy(&self) -> Result<(), SendError>;
    /// This creates an xdg_toplevel object for the given xdg_surface and gives the
    /// associated wl_surface the xdg_toplevel role. see the documentation of
    /// xdg_toplevel for more details about what an xdg_toplevel is and how it is used.
    fn get_toplevel(&self, id: NewId) -> Result<(), SendError>;
    /// This creates an xdg_popup object for the given xdg_surface and gives the
    /// associated wl_surface the xdg_popup role. if null is passed as a parent, a
    /// parent surface must be specified using some other protocol, before committing
    /// the initial state. see the documentation of xdg_popup for more details about
    /// what an xdg_popup is and how it is used.
    fn get_popup(
        &self,
        id: NewId,
        parent: Option<XdgSurface>,
        positioner: XdgPositioner,
    ) -> Result<(), SendError>;
    /// The window geometry of a surface is its "visible bounds" from the user's
    /// perspective. client-side decorations often have invisible portions like drop-
    /// shadows which should be ignored for the purposes of aligning, placing and
    /// constraining windows. the window geometry is double buffered, and will be
    /// applied at the time wl_surface.commit of the corresponding wl_surface is called.
    /// when maintaining a position, the compositor should treat the (x, y) coordinate
    /// of the window geometry as the top left corner of the window. a client changing
    /// the (x, y) window geometry coordinate should in general not alter the position
    /// of the window. once the window geometry of the surface is set, it is not
    /// possible to unset it, and it will remain the same until set_window_geometry is
    /// called again, even if a new subsurface or buffer is attached. if never set, the
    /// value is the full bounds of the surface, including any subsurfaces. this updates
    /// dynamically on every commit. this unset is meant for extremely simple clients.
    /// the arguments are given in the surface-local coordinate space of the wl_surface
    /// associated with this xdg_surface. the width and height must be greater than
    /// zero. setting an invalid size will raise an error. when applied, the effective
    /// window geometry will be the set window geometry clamped to the bounding
    /// rectangle of the combined geometry of the surface of the xdg_surface and the
    /// associated subsurfaces.
    fn set_window_geometry(&self, x: i32, y: i32, width: i32, height: i32)
        -> Result<(), SendError>;
    /// When a configure event is received, if a client commits the surface in response
    /// to the configure event, then the client must make an ack_configure request
    /// sometime before the commit request, passing along the serial of the configure
    /// event. for instance, for toplevel surfaces the compositor might use this
    /// information to move a surface to the top left only when the client has drawn
    /// itself for the maximized or fullscreen state. if the client receives multiple
    /// configure events before it can respond to one, it only has to ack the last
    /// configure event. a client is not required to commit immediately after sending an
    /// ack_configure request - it may even ack_configure several times before its next
    /// surface commit. a client may send multiple ack_configure requests before
    /// committing, but only the last request sent before a commit indicates which
    /// configure event the client really is responding to.
    fn ack_configure(&self, serial: u32) -> Result<(), SendError>;
}

impl XdgSurfaceExt for XdgSurface {
    /// Destroy the xdg_surface object. an xdg_surface must only be destroyed after its
    /// role object has been destroyed.
    fn destroy(&self) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Request::Destroy {}.into_raw(self.id()))
    }
    /// This creates an xdg_toplevel object for the given xdg_surface and gives the
    /// associated wl_surface the xdg_toplevel role. see the documentation of
    /// xdg_toplevel for more details about what an xdg_toplevel is and how it is used.
    fn get_toplevel(&self, id: NewId) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Request::GetToplevel { id }.into_raw(self.id()))
    }
    /// This creates an xdg_popup object for the given xdg_surface and gives the
    /// associated wl_surface the xdg_popup role. if null is passed as a parent, a
    /// parent surface must be specified using some other protocol, before committing
    /// the initial state. see the documentation of xdg_popup for more details about
    /// what an xdg_popup is and how it is used.
    fn get_popup(
        &self,
        id: NewId,
        parent: Option<XdgSurface>,
        positioner: XdgPositioner,
    ) -> Result<(), SendError> {
        self.connection().borrow_mut().send(
            Request::GetPopup {
                id,
                parent,
                positioner,
            }
            .into_raw(self.id()),
        )
    }
    /// The window geometry of a surface is its "visible bounds" from the user's
    /// perspective. client-side decorations often have invisible portions like drop-
    /// shadows which should be ignored for the purposes of aligning, placing and
    /// constraining windows. the window geometry is double buffered, and will be
    /// applied at the time wl_surface.commit of the corresponding wl_surface is called.
    /// when maintaining a position, the compositor should treat the (x, y) coordinate
    /// of the window geometry as the top left corner of the window. a client changing
    /// the (x, y) window geometry coordinate should in general not alter the position
    /// of the window. once the window geometry of the surface is set, it is not
    /// possible to unset it, and it will remain the same until set_window_geometry is
    /// called again, even if a new subsurface or buffer is attached. if never set, the
    /// value is the full bounds of the surface, including any subsurfaces. this updates
    /// dynamically on every commit. this unset is meant for extremely simple clients.
    /// the arguments are given in the surface-local coordinate space of the wl_surface
    /// associated with this xdg_surface. the width and height must be greater than
    /// zero. setting an invalid size will raise an error. when applied, the effective
    /// window geometry will be the set window geometry clamped to the bounding
    /// rectangle of the combined geometry of the surface of the xdg_surface and the
    /// associated subsurfaces.
    fn set_window_geometry(
        &self,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    ) -> Result<(), SendError> {
        self.connection().borrow_mut().send(
            Request::SetWindowGeometry {
                x,
                y,
                width,
                height,
            }
            .into_raw(self.id()),
        )
    }
    /// When a configure event is received, if a client commits the surface in response
    /// to the configure event, then the client must make an ack_configure request
    /// sometime before the commit request, passing along the serial of the configure
    /// event. for instance, for toplevel surfaces the compositor might use this
    /// information to move a surface to the top left only when the client has drawn
    /// itself for the maximized or fullscreen state. if the client receives multiple
    /// configure events before it can respond to one, it only has to ack the last
    /// configure event. a client is not required to commit immediately after sending an
    /// ack_configure request - it may even ack_configure several times before its next
    /// surface commit. a client may send multiple ack_configure requests before
    /// committing, but only the last request sent before a commit indicates which
    /// configure event the client really is responding to.
    fn ack_configure(&self, serial: u32) -> Result<(), SendError> {
        self.connection()
            .borrow_mut()
            .send(Request::AckConfigure { serial }.into_raw(self.id()))
    }
}
