#!/usr/bin/env python3
import argparse
import re

def parse_config(config):
    vs = {}
    # Parse the .config file.
    for line in config.splitlines():
        m = re.match(r"CONFIG_(?P<name>[^=]+)=['\"]?(?P<value>[^'\"]*)['\"]?$",
            line)
        if m is None:
            continue
        vs[m.group("name")] = m.group("value").replace("CONFIG_", "", 1)

    # Generate .config.parsed file.
    if "ARCH_X64" in vs:
        arch = "x64"

    if "BUILD_RELEASE" in vs:
        build = "release"
    elif "BUILD_DEBUG" in vs:
        build = "debug"

    startups = []
    apps = []
    for k,v in vs.items():
        if k.endswith("_SERVER"):
            # XXX:
            server_name = k.replace("_SERVER", "", 1).lower()
            startups.append(server_name)
        if k.endswith("_APP"):
            # XXX:
            app_name = k.replace("_APP", "", 1).lower()
            apps.append(app_name)

    parsed = f"# Generated by tools/parseconfig.py\n"
    parsed += f"ARCH := {arch}\n"
    parsed += f"BUILD := {build}\n"
    parsed += f"BUILD_DIR := {vs['BUILD_DIR']}\n"
    parsed += f"INIT := {vs['INIT']}\n"
    parsed += f"LLVM_PREFIX := {vs['LLVM_PREFIX']}\n"
    parsed += f"GRUB_PREFIX := {vs['GRUB_PREFIX']}\n"
    parsed += f"STARTUPS := {' '.join(startups)}\n"
    parsed += f"APPS := {' '.join(apps)}\n"
    return parsed

def main():
    parser = argparse.ArgumentParser(description="Generates the build config.")
    parser.add_argument("-o", dest="outfile", default=".config.parsed",
                        help="The output file.")
    parser.add_argument("-i", dest="infile", default=".config",
                        help="The .config file.")
    args = parser.parse_args()

    with open(args.outfile, "w") as f:
        f.write(parse_config(open(args.infile).read()))

if __name__ == "__main__":
    main()
