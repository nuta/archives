//
// Reserved interface IDs are:
//
//   - 100: Notification
//
//

[id(1)]
interface runtime {
    [id(1), type(call)]
    exit(code: int32) -> ()
    [id(2), type(call)]
    printchar(ch: uint8) -> ()
}

[id(2)]
interface process {
    [id(1), type(call)]
    create(name: smallstring) -> (pid: pid, pager_ch: cid)
    [id(2), type(call)]
    destroy(pid: pid) -> ()
    // TODO: Use channel payload.
    [id(3), type(call)]
    add_pager(pid: pid, pager: cid, start: uintptr, size: size, flags: uint8)
        -> ()
    [id(4), type(call)]
    send_channel(pid: pid, ch: channel)
        -> ()
}

[id(3)]
interface thread {
    [id(1), type(call)]
    spawn(pid: pid, start: uintptr, stack: uintptr, buffer: uintptr,
          arg: uintptr) -> (tid: tid)

    [id(2), type(call)]
    destroy(tid: tid) -> ()
}

[id(4)]
interface timer {
    type timer_id = int32
    [id(1), type(call)]
    set(ch: channel, initial: int32, interval: int32) -> (timer: timer_id)
    [id(2), type(call)]
    clear(timer: timer_id) -> ()
}

[id(9)]
interface kernel {
}

[id(10)]
interface server {
    [id(1), type(call)]
    connect(interface: uint8) -> (ch: channel)
}

[id(11)]
interface memory {
    [id(1), type(call)]
    alloc_pages(order: size) -> (page: page)
    [id(2), type(call)]
    alloc_phy_pages(map_at: paddr, order: size) -> (page: page, paddr: paddr)
}

[id(12)]
interface pager {
    [id(1), type(call)]
    fill(pid: pid, addr: uintptr, size: size) -> (page: page)
}

[id(13)]
interface memmgr {
    [id(1), type(call)]
    get_framebuffer()
        -> (framebuffer: page, width: int32, height: int32, bpp: uint8)
}

[id(14)]
interface discovery {
    [id(1), type(call)]
    publicize(interface: uint8, ch: channel) -> ()
    [id(2), type(call)]
    connect(interface: uint8) -> (ch: channel)
}

[id(15)]
interface io {
    [id(1), type(call)]
    allow_iomapped_io() -> ()

    [id(2), type(call)]
    listen_irq(ch: channel, irq: uint8) -> ()
}

[id(16)]
interface fs {
    type fd = int32
    type file_mode = uint8

    [id(1), type(call)]
    open(path: smallstring, mode: file_mode) -> (handle: fd)
    [id(2), type(call)]
    close(handle: fd) -> ()
    [id(3), type(call)]
    read(handle: fd, offset: size, len: size) -> (data: page)
}

// TODO:
// [id(17)]
// interface network {
// }

[id(18)]
interface gui {
    [id(1), type(call)]
    console_write(ch: uint8) -> ()
    [id(2), type(call)]
    activate() -> ()
    [id(3), type(call)]
    key_event(ch: uint8) -> ()
}

[id(19)]
interface benchmark {
    [id(1), type(call)]
    nop() -> ()
}

[id(20)]
interface api {
    [id(1), type(call)]
    create_app(path: smallstring) -> (pid: pid)
    [id(2), type(call)]
    start_app(pid: pid) -> ()
    [id(3), type(call)]
    join_app(pid: pid) -> (code: int8)
    [id(4), type(call)]
    exit_app(code: int8) -> ()
}

[id(30)]
interface keyboard_driver {
    [id(1), type(call)]
    listen(ch: channel) -> ()

    [id(2), type(call)]
    keyinput_event(keycode: uint8) -> ()
}

[id(31)]
interface mouse_driver {
    [id(1), type(call)]
    listen(ch: channel) -> ()

    [id(2), type(call)]
    mouse_event(left_button: bool, right_button: bool, x: int16, y: int16) -> ()
}

[id(32)]
interface storage_driver {
    [id(1), type(call)]
    read(sector: uint64, len: size) -> (data: page)
    [id(2), type(call)]
    write(sector: uint64, len: size, data: page) -> ()
}

[id(40)]
interface pci {
    [id(1), type(call)]
    wait_for_device(vendor: uint16, device: uint16)
        -> (subvendor: uint16, subdevice: uint16, bus: uint8, slot: uint8)
    [id(2), type(call)]
    read_config16(bus: uint8, slot: uint8, offset: uint16)
        -> (data: uint16)
    [id(3), type(call)]
    read_config32(bus: uint8, slot: uint8, offset: uint16)
        -> (data: uint32)
    [id(4), type(call)]
    write_config8(bus: uint8, slot: uint8, offset: uint16, data: uint8)
        -> ()
    [id(5), type(call)]
    write_config32(bus: uint8, slot: uint8, offset: uint16, data: uint32)
        -> ()
}
